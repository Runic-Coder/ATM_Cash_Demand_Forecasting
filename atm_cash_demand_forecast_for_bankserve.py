# -*- coding: utf-8 -*-
"""ATM Cash Demand Forecast for BankServe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wNTjdEODq4mXeeB4uDn20nbnku_kg8Jc
"""

# step 1: importing pandas,sesborn,matplot libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Step 2: reading the file data
df = pd.read_csv("/content/ATM Cash Demand Forecast for BankServe.csv")

# Step 3: Inspecting the file data
print(df.info())
print("\n" + "-"*70 + "\n")
print(df.head())

# Step 4: date is object(string) thus we need to change it to pandas datetime format
df['date'] = pd.to_datetime(df['date'])
df_clean = df.copy()
df.head()

# Step 5.1: defining Features and Target
features = ['location_type','nearby_population','income_level','holiday_flag','local_event_flag','season']
target = 'forecasted_cash_demand'

# Step 5.2: defining x and y
x = df[features]
y = df[target]

# Step 6: Encode categorical variables
x = pd.get_dummies(x, drop_first=True)
print(x.head())

# Step 7: Spliting the dataset into train and test
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.8,random_state = 2529)

# Step 8: Train Random Forest Regressor
from sklearn.ensemble import RandomForestRegressor
# Since we have 1000 enteries meaning small dataset thus using 200 trees
model = RandomForestRegressor(n_estimators=200,max_depth=10,random_state=2529,n_jobs=-1)
model.fit(x_train, y_train)

# Step 9: Make predictions on test set
y_pred = model.predict(x_test)

# Step 9: Evaluating performance
from sklearn.metrics import mean_absolute_percentage_error
mape = mean_absolute_percentage_error(y_test, y_pred)
print(f"MAPE: {mape:.4f}")

# Step 10: Plot feature importance
importances = model.feature_importances_
importance_df = pd.DataFrame({
    'Feature': x.columns,
    'Importance': importances
}).sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 4))
sns.barplot(data=importance_df, x='Importance', y='Feature')
plt.title("Feature Importances - Random Forest")
plt.tight_layout()
plt.show()

# Step 11: Saving the trained model using pickle

import pickle
pickle_out = open("atm_demand_model.pkl", mode = "wb")
pickle.dump(model, pickle_out)
pickle_out.close()